<?php


function drab_menu(){
  
  
  $items['admin/config/development/drab'] = array(
    'title' => 'Aggregation bundles',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('drab_bundle_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer drab'),
    'description' => 'Set bundles of CSS files in the theme',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'drab.admin.inc',
  );
  
  return $items;
}

function drab_permission(){
  return array(
    'administer drab' => array(
      'title' => t('Administer Drupal Aggregation Bundles'),
      'description' => t('Create CSS/JS file bundles'),
    ),
  );
}


/**
 * A function to generate the bundle data from the current themes.
 *
 * 
 * returns a sting of html link tags
 * 
 */
function drab_get_files($current_path) {
  $load = &drupal_static(__FUNCTION__);

  if (!isset($load)) {
    // This is the first time this is called.
    global $base_url, $base_theme_info, $theme_info;
  
    // Make a list of base themes and the current theme.
    $themes = $base_theme_info;
    $themes[] = $theme_info;
    
    // generate file info
    $generate_files = array();
    
    foreach (array_keys($themes) as $key) {
      $theme_path = dirname($themes[$key]->filename) . '/';
      if (isset($themes[$key]->info['bundle'])) {
        
        foreach ($themes[$key]->info['bundle'] as $bundle) {
          
          $has_errors = FALSE;
          
          
          // Validate we have all the information we need
          $type = key($bundle);
          $allowed_types = array('css', 'js');
          if(!in_array($type, $allowed_types)){
            drupal_set_message(t("Bundle needs a correct type set, either 'css' or 'js'"), 'error');
            $has_errors = TRUE;
          }
//          else if(!isset($bundle[$type]['file_name']) && empty($bundle[$type]['file_name'])){
//            drupal_set_message(t("Bundle needs a filename set"), 'error');
//            $has_errors = TRUE;
//          }
          else if(!isset($bundle[$type]['files']) && empty($bundle[$type]['files'])){
            drupal_set_message(t("Bundle needs a set of files to bundle"), 'error');
            $has_errors = TRUE;
          }
          
          
          // add the theme to the bundle to make life simpler
          $bundle['theme'] = $themes[$key]->name;
          
          
          // if we have no errors then generate the bundle
          if(!$has_errors){
            $file_details = drab_generate_bundled_file($bundle);
            
            // add an extra attribute to make tracking files easier
            $file_details['#attributes']['data-drab-generated'] = NULL;
            
            
            // check if we are on a path to add on
            foreach($bundle[$type]['path'] as $bundle_path) {
            
              $page_match = drupal_match_path($current_path, $bundle_path);
              $in_current_theme = ($theme_info->name == $themes[$key]->name) ? TRUE : FALSE;
              
              if(($page_match || $bundle_path == "all")){
                $generated_files[] = $file_details;
              }
            }
             
            print_r($generated_files);
          }
        }
      }      
    }      
  }
  
  // generate the link html tags
  $files = '';
  foreach($generated_files as $file){
    
//    print_r($file);
//    print_r(drupal_render($file));
    
    $files .= drupal_render($file);
  }
  
  return $files;
}




/**
 * Helper function to sanitize Modernizr.load() assets
 */
function _drab_sanitize_resource($resource, $theme_path) {
  global $base_url;
  $output = '';

  // If a path starts with 'sites' we assume they know exactly where they're
  // going. Otherwise, they seem like relative URLs so append theme path.
  $output = (strpos($resource, 'sites/') !== FALSE) ? $resource : $base_url . '/' . $theme_path . $resource;

  return $output;
}

/**
 * Generates a aggregated file based on the bundle
 * 
 * Returns an array that can by used 
 * 
 * @param array $bundle
 * @return array 
 */
function drab_generate_bundled_file($bundle){
    
   // vars
   $all_css_files = drupal_add_css();   
   $type = key($bundle);   
   $files = $bundle[$type]['files'];   
   $file_group = array();
   
   // copy the file information from the theme in to our custom group
   foreach($files as $file){
     
     // fix path
     $theme_path = drupal_get_path('theme', $bundle['theme']);
     $file_path = $theme_path . '/' . $file;
     
     
     // copy
     $file_group[$file_path] = $all_css_files[$file_path];
     
     // make a new group
     $file_group[$file_path]['group'] = 456;
     
     // makre sure preprocess is set
     $file_group[$file_path]['preprocess'] = 1;
   }

   $rendered_options = array(
     '#items' => $file_group,
     '#pre_render' => array('drupal_pre_render_styles'),
     '#group_callback' => 'drupal_group_css',
     '#aggregate_callback' => 'drupal_aggregate_css',
   );
   drupal_aggregate_css();
   // if the less module exists process the stylesheets
   if(module_exists('less')){
     $rendered_options = _less_pre_render($rendered_options);
   }
   
   $rendered = drupal_pre_render_styles($rendered_options);
    
   return $rendered[0];
   
}

/**
  * Implements hook_theme_registry_alter().
  */
function drab_theme_registry_alter(&$registry) {
  if (($index = array_search('template_process_html', $registry['html']['process functions'], TRUE)) !== FALSE) {
    array_splice($registry['html']['process functions'], $index, 1, 'drab_template_process_html_override');
  }
}

/**
  * Overrides template_process_html() in order to provide support for awesome new stuffzors!
  *
  * Huge, amazing ups to the wizard Sebastian Siemssen (fubhy) for showing me how to do this.
  */
function drab_template_process_html_override(&$variables) {

  // Render page_top and page_bottom into top level variables.
  $variables['page_top'] = drupal_render($variables['page']['page_top']);
  $variables['page_bottom'] = drupal_render($variables['page']['page_bottom']);
  // Place the rendered HTML for the page body into a top level variable.
  $variables['page'] = $variables['page']['#children'];

  
  $path = current_path();
    
  $drab_files = drab_get_files($path);
  if($drab_files){
    $styles = $drab_files;
  } else {
    $styles = drupal_add_css();
  }
  
  
  $variables['head'] = drupal_get_html_head();
  $variables['css'] = drupal_add_css();
  $variables['styles']  = $styles;
  $variables['scripts'] = drupal_get_js();

}